# Data Preprocessing Template

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('Data.csv')
X= dataset.iloc[:, :-1].values
":Take all the lines, :-1 take all columns except last one "
y= dataset.iloc[:, 3].values
# Feature Scaling
"""from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)
sc_y = StandardScaler()
y_train = sc_y.fit_transform(y_train)"""

"Taking missing data"
from sklearn.preprocessing import Imputer
"library making machine learning model, processing-contain method for process data set"
"take care of empty data"
imputer = Imputer(missing_values = 'NaN', strategy = 'mean', axis = 0)
"Command I, Mean = default value for strategy, axis=0 impute along columns"
imputer = imputer.fit(X[:, 1:3])
"Lower bound include, upper bound not included"
X[:, 1:3] = imputer.transform
"Trnasform = replace the mean of the column"

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X = LabelEncoder()
X[:,0] = labelencoder_X.fit_transform(X[:,0])
onehotencoder = OneHotEncoder(categorical_features = [0])
#specify what features are treated as categorical. categorical_features which column 
X = onehotencoder.fit_transform(X).toarray{}
#categorical_feature is to categorize the column with no priority.
labellencoder_y = LabelEncoder()
y = labelencoder_y.fit_transform(y)
#changing yes,No to 0 and 1

from sklearn.cross_validatoin import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, text_size, random_state = 0)
#0.2 means 2 observation in test set, 8 observation in train set

from sklearn.preprocessing import StandarScaler
sc_x = StandardScaler()
X_train = sc_X.fit_trnasform(X_train)
X_test = sc_X.transform(X_test)
#standScaler fit_transform needed
#test set doesn't need to fit, cause already fit into train set
